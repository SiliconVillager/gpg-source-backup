#pragma once

#include <GLMatrix.h>
#include <GLQuaternion.h>
#include <GLVector.h>

using mathglpp::GLMatrix4f; 
using mathglpp::GLQuaternionf;
using mathglpp::GLVector3f;

#define PI   3.14159265358979323846f
#define HALF_PI (PI/2.0)
#define Sq(val) (val*val)
#define Max(a, b) ((a) < (b) ? (b) : (a))
#define Min(a, b) ((a) > (b) ? (b) : (a))
#define RadToDeg(rad) ( ( rad ) * ( 180.0f / PI ))
#define DegToRad(deg) ( ( deg ) * ( PI / 180.0f ))
#define Clamp(val, minVal, maxVal)( Min( Max( minVal, val ), maxVal) )
#define Lerp( val1, val2, fraction) ( val1 + ( (val2 - val1) * fraction ))
#define Rescale(val, currMin, currMax, newMin, newMax) ( Lerp( newMin, newMax, ((val - currMin) / (currMax - currMin))))

#define UnitRand() ( (float)rand()/(float)RAND_MAX )
#define RangeRand( minVal, maxVal ) ( ( UnitRand() * ( maxVal - minVal ) ) + minVal )


struct IKChain {
	// The number of bones in this chain
	unsigned int	m_iNumBones;			

	// These transform values generated by the
	// game animation system. In this demo
	// they are static, and we simply use them as the basis
	// for the IK solution.
	GLQuaternionf*	m_boneLocalRotations;
	GLVector3f*		m_boneLocalTranslations;

	GLQuaternionf*	m_boneOrientations;
	GLVector3f*		m_bonePositions;

	float*			m_fBoneLengths;
	float			m_fChainLength;
};

extern IKChain*		g_ikChain;
extern GLVector3f	g_ikGoalPosition;

IKChain*	CreateIKChain( int numBones );
void		CleanUpChain( );

// Each update the Chain is reset to the FK pose defined in the chain struct
void		UpdateChainFK( );
void		SetBoneFKOrientation( int boneid, GLQuaternionf boneOrientation );
void		SetBoneFKPosition( int boneid, GLVector3f bonePosition );


///////////////////////////////////////////////
// NCFIK_1_BasicChainAlignment
// This function simply peforms the alignment step.
// The entire chain is aligned with the IK goal, and
// each bone after the first bone is also corrected based 
// on any modification to the bones position cause by the 
// parents re-orientation
void NCFIK_1_BasicChainAlignment( IKChain *chain, GLVector3f goalPosition, unsigned int options );


///////////////////////////////////////////////
// NCFIK_2_BasicSolve
// Solve IK on a chain using the basic method using trigonometry to 
// calculate the maximum bone angles. This implimentation will dislay 
// visual artifacts when a chain is contracted to the point where the
// distToIkGoal is less than distToFkChainTip - fBoneLength
void NCFIK_2_BasicSolve( IKChain *chain, GLVector3f goalPosition, unsigned int options );

///////////////////////////////////////////////
// NCFIK_3_SolveLongerChains
// This implimentation features 2 methods to calculate the maximum bone angles
// When the chain is getting close to its extension limit ( distToFkChainTip > remainingChainLength )
// Then trigonometry is used to calculate the maximum bone angle. This ensures that
// the chain will stretch out straigh and reach the limit of its extension correctly.
// When the goal is closer the to root of the chain then the maximum bone angle is
// calculated directly from the remaining chain length
void NCFIK_3_SolveLongerChains( IKChain *chain, GLVector3f goalPosition, unsigned int options );


///////////////////////////////////////////////
// NCFIK_4_SolveWithExtensionDampening
// When the goal is reaching the limit of the chains reach, the chain recaculates a goal 
// position by modifying the distance value using the LimitValue function. This function
// is usefull for applying a soft dampened limit to any scalar value.
void NCFIK_4_SolveWithExtensionDampening( IKChain *chain, GLVector3f goalPosition, unsigned int options );


///////////////////////////////////////////////
// NCFIK_5_SolveWithAnimatedJointOffsets
//
// this version of the NCF IK solver supports an fk pose where the distance between bones may be changin from frame to frame.
// Also, the actual local offset vector of the bone may be changing, meaning that a child bone may not be offset from
// its parent along the parent bones x axis. 
void NCFIK_5_SolveWithAnimatedJointOffsets( IKChain *pChain, GLVector3f goalPosition, unsigned int options );